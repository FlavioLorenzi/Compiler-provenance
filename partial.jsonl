{"instructions": ["push r12", "push rbp", "push rbx", "test byte [rdi + 0x46] 1", "je 0x80003cf", "mov edx 0", "mov esi 0xf2", "mov edi 0", "call 0x80003cf", "mov rbp rdi", "mov r12d esi", "mov rbx rdi", "jmp 0x80003dd", "mov rbx rax", "mov rax qword [rbx + 0xd0]", "test rax rax", "je 0x80003ef", "test byte [rax + 0x48] 1", "je 0x80003da", "cmp qword [rbx + 0x10] 0", "je 0x8000418", "cmp rbx qword [0x080003fd]", "je 0x800040f", "mov rdi rbx", "call sym.snip", "mov rdi rbx", "call entry0", "mov rax qword [rbx + 0x10]", "jmp 0x800049f", "mov eax 0", "test r12b 1", "jne 0x800049f", "mov rdi rbx", "call 0x800042b", "test rax rax", "je 0x8000464", "test r12b 2", "jne 0x800045e", "mov rsi qword [rbx + 0x30]", "mov rdi qword [rbx + 0x10]", "mov edx 0", "call 0x8000448", "test eax eax", "je 0x800045e", "test r12b 4", "jne 0x800045e", "mov edi 1", "call 0x800045c", "jmp 0x8000464", "mov rax qword [rbx + 0x10]", "jmp 0x800049f", "call 0x8000469", "mov edi eax", "call 0x8000470", "mov rbx rax", "mov edx 5", "mov esi 0", "mov edi 0", "call 0x8000487", "mov rdx rbx", "mov rsi rbp", "mov rdi rax", "mov eax 0", "call 0x800049a", "mov eax 0", "pop rbx", "pop rbp", "pop r12", "ret"], "opt": "L", "compiler": "gcc"}
{"instructions": ["xor edx edx", "cmp rdi rsi", "mov eax 0xffffffff", "seta dl", "cmovae eax edx", "ret"], "opt": "H", "compiler": "gcc"}
{"instructions": ["mov eax dword [arg_784h]", "add eax 3", "mov edi eax", "call sym.getIByte", "mov byte [arg_65fh] al", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.epartIsReg", "test al al", "je 0x8021c22", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.eregOfRM", "mov edi eax", "call sym.getXMMReg", "mov rbx rax", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.gregOfRM", "mov rsi rbx", "mov edi eax", "call sym.putXMMReg", "mov eax dword [0x08021bc8]", "and eax 0x80", "test eax eax", "je 0x8021c15", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.gregOfRM", "mov edi eax", "call sym.nameXMMReg", "mov rbx rax", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.eregOfRM", "mov edi eax", "call sym.nameXMMReg", "mov rdx rbx", "mov rsi rax", "mov edi 0", "mov eax 0", "call 0x8021c15", "add dword [arg_784h] 4", "jmp 0x803699b", "mov eax dword [arg_784h]", "lea edi [rax + 3]", "movzx esi byte [arg_77fh]", "lea rdx [arg_180h]", "lea rax [arg_1bch]", "mov rcx rdx", "mov edx edi", "mov rdi rax", "call sym.disAMode", "mov dword [arg_674h] eax", "mov eax dword [arg_674h]", "mov edi eax", "call sym.mkexpr", "mov rsi rax", "mov edi 0x110e", "call sym.loadLE", "mov rbx rax", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.gregOfRM", "mov rsi rbx", "mov edi eax", "call sym.putXMMReg", "mov eax dword [0x08021c95]", "and eax 0x80", "test eax eax", "je 0x8021cd1", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.gregOfRM", "mov edi eax", "call sym.nameXMMReg", "mov rdx rax", "lea rax [arg_180h]", "mov rsi rax", "mov edi 0", "mov eax 0", "call 0x8021cd1", "mov eax dword [arg_1bch]", "add eax 3", "add dword [arg_784h] eax", "jmp 0x803699b", "mov eax dword [local_164h]", "cmp eax 0x11", "je 0x80369ba", "cmp eax 0x11", "ja 0x80369b3", "cmp eax 0x10", "je 0x8036a26", "jmp 0x8036a0d", "cmp eax 0x13", "ja 0x8036a0d", "jmp 0x80369e7", "mov edx dword [0x080369c0]", "mov eax dword [local_784h]", "add eax edx", "mov edi eax", "call sym.mkU32", "mov rsi rax", "mov edi 0x44", "call 0x80369dd", "mov rdi rax", "call sym.stmt", "jmp 0x8036a27", "mov rax qword [local_170h]", "mov edi eax", "call sym.mkU32", "mov rsi rax", "mov edi 0x44", "call 0x8036a03", "mov rdi rax", "call sym.stmt", "jmp 0x8036a27", "mov ecx 0", "mov edx 0x3c64", "mov esi 0", "mov edi 0", "call 0x8036a26", "nop", "mov eax dword [0x08036a2d]", "and eax 0x80", "test eax eax", "je 0x8036a45", "mov edi 0", "mov eax 0", "call 0x8036a45", "mov eax dword [local_684h]", "mov edx dword [local_784h]", "mov ecx edx", "sub ecx eax", "mov eax ecx", "mov dword [local_160h] eax", "mov rax qword [local_48h]", "mov rdx qword [local_160h]", "mov qword [rax] rdx", "mov rdx qword [local_168h]", "mov qword [rax + 8] rdx", "mov rdx qword [local_170h]", "mov qword [rax + 0x10] rdx", "mov rax qword [local_48h]", "add rsp 0x7a8", "pop rbx", "pop rbp", "pop r12", "pop r13", "ret"], "opt": "L", "compiler": "gcc"}
{"instructions": ["push rbp", "mov rbp rsi", "push rbx", "mov rbx rdi", "sub rsp 0x18", "test edx edx", "mov rdi qword [rdi + 0x48]", "jne 0x8000a80", "test rsi rsi", "jne 0x8000a80", "test rdi rdi", "je 0x8000ab8", "mov rsi rbp", "call 0x8000a66", "cmp eax 1", "sbb eax eax", "not eax", "and eax 2", "add rsp 0x18", "pop rbx", "pop rbp", "ret", "test rdi rdi", "mov rax qword [rbx + 0x20]", "jne 0x8000a5e", "lea rsi [0x08000a90]", "mov rdi rax", "mov dword [local_ch] edx", "call 0x8000a9c", "test rax rax", "mov rdi rax", "mov qword [rbx + 0x48] rax", "mov edx dword [local_ch]", "jne 0x8000a5e", "mov eax 1", "jmp 0x8000a70", "xor eax eax", "jmp 0x8000a70"], "opt": "H", "compiler": "gcc"}
{"instructions": ["push rbx", "sub rsp 0xf0", "mov qword [local_e8h] rdi", "mov dword [local_e4h] esi", "mov dword [local_e0h] edx", "mov rax qword [local_e8h]", "mov rax qword [rax + 0x18]", "mov qword [local_d8h] rax", "mov rax qword [local_e8h]", "mov rax qword [rax + 0x20]", "mov qword [local_d0h] rax", "mov rax qword [local_d0h]", "mov qword [local_78h] rax", "mov qword [local_70h] 0", "mov rax qword [local_70h]", "movzx edx byte [rax]", "mov rax qword [local_70h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_70h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_70h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_78h]", "call 0x8000180", "mov rdi qword [local_d0h]", "mov esi 0x12", "call 0x8000192", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x80001a4", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x80001b6", "mov rax qword [local_e8h]", "mov esi dword [rax + 0x2c]", "add esi 4", "mov rdi qword [local_d0h]", "call 0x80001d1", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x800022d", "mov rdi qword [local_d0h]", "mov esi 0x32", "call 0x800023f", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000251", "mov dword [local_ach] 0", "mov dword [local_b0h] 0", "mov dword [local_b4h] 0", "mov dword [local_9ch] 0", "mov dword [local_94h] 0", "mov dword [local_a0h] 0", "mov rdx qword [local_e8h]", "mov eax dword [local_a0h]", "cmp eax dword [rdx + 0x2c]", "jae 0x800038b", "mov eax dword [local_a0h]", "movsxd rdx eax", "mov rax rdx", "add rax rax", "add rax rdx", "shl rax 4", "add rax qword [local_d8h]", "mov qword [local_70h] rax", "mov rax qword [local_70h]", "mov edx dword [rax + 0xc]", "lea rax [local_9ch]", "add dword [rax] edx", "mov rax qword [local_70h]", "mov eax dword [rax + 8]", "cmp eax dword [local_ach]", "jle 0x8000301", "mov rax qword [local_70h]", "mov eax dword [rax + 8]", "mov dword [local_ach] eax", "mov rax qword [local_70h]", "mov edx dword [rax]", "lea rax [local_b4h]", "add dword [rax] edx", "mov rax qword [local_70h]", "mov edx dword [rax + 4]", "lea rax [local_b0h]", "add dword [rax] edx", "mov rdx qword [local_70h]", "mov dword [local_60h] 0x3e8", "mov dword [local_64h] 1", "mov rax qword [local_70h]", "mov eax dword [rax + 0x1c]", "movsxd rdi eax", "mov rdx qword [rdx + 0x10]", "mov rsi qword [local_60h]", "mov ecx 0", "call 0x8000357", "mov dword [local_98h] eax", "mov eax dword [local_98h]", "cmp eax dword [local_94h]", "jle 0x800037c", "mov eax dword [local_98h]", "mov dword [local_94h] eax", "lea rax [local_a0h]", "inc dword [rax]", "jmp 0x8000293", "mov esi dword [local_9ch]", "mov rdi qword [local_d0h]", "call 0x800039f", "mov esi dword [local_9ch]", "mov rdi qword [local_d0h]", "call 0x80003b3", "mov esi dword [local_ach]", "mov rdi qword [local_d0h]", "call 0x80003c7", "cmp dword [local_b4h] 0", "jle 0x8000400", "mov edx dword [local_b0h]", "lea rax [local_b4h]", "mov qword [local_8h] rax", "mov eax edx", "mov rcx qword [local_8h]", "cdq", "idiv dword [rcx]", "mov dword [local_1ch] eax", "mov eax dword [local_1ch]", "mov dword [local_a4h] eax", "jmp 0x800040b", "mov dword [local_a4h] 0", "mov esi dword [local_a4h]", "mov rdi qword [local_d0h]", "call 0x800041f", "mov esi dword [local_b4h]", "mov rdi qword [local_d0h]", "call 0x8000433", "mov esi dword [local_94h]", "mov rdi qword [local_d0h]", "call 0x8000447", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000459", "mov esi dword [local_e0h]", "mov rdi qword [local_d0h]", "call 0x800046d", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov rdi qword [local_70h]", "mov edx 1", "mov esi 0", "call 0x800048e", "mov qword [local_78h] rax", "mov rax qword [local_78h]", "mov dword [local_8ch] eax", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x80004b1", "mov rax qword [local_e8h]", "mov esi dword [rax + 0x2c]", "mov rdi qword [local_d0h]", "call 0x80004c9", "mov dword [local_90h] 3", "mov rax qword [local_d0h]", "mov eax dword [rax + 0x90]", "and eax 1", "test eax eax", "jne 0x80004f4", "lea rax [local_90h]", "or dword [rax] 4", "mov esi dword [local_90h]", "mov rdi qword [local_d0h]", "call 0x8000508", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x8000564", "mov dword [local_a8h] 0x12", "mov dword [local_a0h] 0", "cmp dword [local_a0h] 3", "ja 0x80005f0", "mov eax dword [local_a0h]", "cdqe", "mov rsi qword [rax*8]", "mov rax qword [local_e8h]", "mov rdi qword [rax + 0x4b0]", "mov ecx 0", "mov edx 0", "call 0x80005b3", "mov qword [local_80h] rax", "cmp qword [local_80h] 0", "je 0x80005e4", "mov rax qword [local_80h]", "mov rdi qword [rax + 8]", "call 0x80005d7", "mov rdx rax", "lea rax [local_a8h]", "add dword [rax] edx", "lea rax [local_a0h]", "inc dword [rax]", "jmp 0x800057a", "mov esi dword [local_a8h]", "mov rdi qword [local_d0h]", "call 0x8000604", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000616", "mov dword [local_a0h] 0", "cmp dword [local_a0h] 3", "ja 0x80006aa", "mov eax dword [local_a0h]", "cdqe", "mov rsi qword [rax*8]", "mov rax qword [local_e8h]", "mov rdi qword [rax + 0x4b0]", "mov ecx 0", "mov edx 0", "call 0x800065a", "mov qword [local_80h] rax", "cmp qword [local_80h] 0", "je 0x8000680", "mov rax qword [local_80h]", "mov rax qword [rax + 8]", "mov qword [local_40h] rax", "jmp 0x8000689", "mov qword [local_40h] 0", "mov rdi qword [local_d0h]", "mov rsi qword [local_40h]", "call entry0", "lea rax [local_a0h]", "inc dword [rax]", "jmp 0x8000621", "mov dword [local_a0h] 0", "mov rdx qword [local_e8h]", "mov eax dword [local_a0h]", "cmp eax dword [rdx + 0x2c]", "jae 0x8001031", "mov eax dword [local_a0h]", "movsxd rdx eax", "mov rax rdx", "add rax rax", "add rax rdx", "shl rax 4", "add rax qword [local_d8h]", "mov qword [local_c8h] rax", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "cmp dword [rax] 1", "jne 0x8000727", "mov qword [local_c0h] 0", "mov qword [local_b8h] 0", "mov dword [local_5ch] 0x49", "jmp 0x8000747", "mov qword [local_c0h] 0", "mov qword [local_b8h] 0", "mov dword [local_5ch] 0x22", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x80007a3", "mov rdi qword [local_c0h]", "call 0x80007b0", "mov rbx rax", "mov rdi qword [local_b8h]", "call 0x80007c0", "lea eax [rbx + rax]", "add eax dword [local_5ch]", "add eax 0x2e", "mov dword [local_a8h] eax", "mov esi dword [local_a8h]", "mov rdi qword [local_d0h]", "call 0x80007e5", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x80007f7", "mov esi dword [local_a0h]", "mov rdi qword [local_d0h]", "call 0x800080b", "mov rax qword [local_c8h]", "mov esi dword [rax + 0xc]", "mov rdi qword [local_d0h]", "call 0x8000823", "mov rax qword [local_c8h]", "mov esi dword [rax + 0xc]", "mov rdi qword [local_d0h]", "call 0x800083b", "mov rax qword [local_c8h]", "mov esi dword [rax + 8]", "mov rdi qword [local_d0h]", "call 0x8000853", "mov rax qword [local_c8h]", "cmp dword [rax] 0", "jle 0x8000889", "mov rax qword [local_c8h]", "mov rdx qword [local_c8h]", "mov qword [local_10h] rdx", "mov eax dword [rax + 4]", "mov rcx qword [local_10h]", "cdq", "idiv dword [rcx]", "mov dword [local_a4h] eax", "jmp 0x8000894", "mov dword [local_a4h] 0", "mov esi dword [local_a4h]", "mov rdi qword [local_d0h]", "call 0x80008a8", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x80008ba", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x80008cc", "mov rax qword [local_d0h]", "mov eax dword [rax + 0x90]", "and eax 1", "test eax eax", "je 0x80008ef", "mov rax qword [local_c8h]", "cmp dword [rax + 0x1c] 0", "jne 0x8000903", "mov rdi qword [local_d0h]", "mov esi 0x36ee80", "call 0x8000901", "jmp 0x800094b", "mov rdx qword [local_c8h]", "mov dword [local_60h] 0x3e8", "mov dword [local_64h] 1", "mov rax qword [local_c8h]", "mov eax dword [rax + 0x1c]", "movsxd rdi eax", "mov rdx qword [rdx + 0x10]", "mov rsi qword [local_60h]", "mov ecx 0", "call 0x800093c", "mov rdi qword [local_d0h]", "mov esi eax", "call 0x800094b", "mov rsi qword [local_c0h]", "mov rdi qword [local_d0h]", "call sym.put_str8", "mov rsi qword [local_b8h]", "mov rdi qword [local_d0h]", "call sym.put_str8", "mov esi dword [local_5ch]", "mov rdi qword [local_d0h]", "call 0x8000986", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "cmp dword [rax] 1", "jne 0x8000d6e", "mov rax qword [local_c8h]", "mov rdi qword [rax + 0x28]", "mov esi 0", "call 0x80009b1", "mov dword [local_4ch] eax", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov eax dword [rax + 0x74]", "mov dword [local_50h] eax", "mov rax qword [local_c8h]", "mov rdx qword [rax + 0x28]", "mov eax dword [local_4ch]", "cdqe", "mov rdx qword [rdx + 0x20]", "imul rdx rax", "mov eax dword [local_50h]", "shl eax 3", "cdqe", "mov qword [local_8h] rax", "mov rax rdx", "cqo", "idiv qword [local_8h]", "mov qword [local_8h] rax", "mov edx dword [local_8h]", "mov dword [local_58h] edx", "mov rdi qword [local_d0h]", "mov edx 3", "mov esi 0", "call 0x8000a1e", "mov rdi qword [local_d0h]", "mov esi 0xfd", "call 0x8000a30", "mov rdi qword [local_d0h]", "mov esi 0x40000", "call 0x8000a42", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x8000a9e", "mov rdi qword [local_d0h]", "mov esi 0x1b53530", "call 0x8000ab0", "mov rdi qword [local_d0h]", "mov esi 4", "call 0x8000ac2", "mov rdi qword [local_d0h]", "mov esi 0x39", "call 0x8000ad4", "mov ecx dword [local_50h]", "mov dword [local_3ch] ecx", "cmp dword [local_3ch] 0x3e80", "je 0x8000b46", "cmp dword [local_3ch] 0x3e80", "jg 0x8000b06", "cmp dword [local_3ch] 0x1f40", "je 0x8000b46", "cmp dword [local_3ch] 0x2ee0", "je 0x8000b32", "jmp 0x8000b3c", "cmp dword [local_3ch] 0x7d00", "je 0x8000b46", "cmp dword [local_3ch] 0x7d00", "jg 0x8000b26", "cmp dword [local_3ch] 0x5dc0", "je 0x8000b32", "jmp 0x8000b3c", "cmp dword [local_3ch] 0xbb80", "je 0x8000b32", "jmp 0x8000b3c", "mov dword [local_54h] 1", "jmp 0x8000b4e", "mov dword [local_54h] 2", "jmp 0x8000b4e", "mov dword [local_54h] 3", "mov esi dword [local_54h]", "mov rdi qword [local_d0h]", "call 0x8000b5f", "cmp dword [local_58h] 0x22d", "jne 0x8000b70", "lea rax [local_58h]", "dec dword [rax]", "mov esi dword [local_58h]", "mov rdi qword [local_d0h]", "call 0x8000b81", "mov rdi qword [local_d0h]", "mov esi 0x51540", "call 0x8000b93", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov rax qword [rax + 0x20]", "mov qword [local_30h] rax", "cmp qword [local_30h] 0", "jns 0x8000bb6", "add qword [local_30h] 7", "mov rdx qword [local_30h]", "sar rdx 3", "mov rax rdx", "shl rax 4", "sub rax rdx", "shl rax 2", "mov rdi qword [local_d0h]", "mov esi eax", "call 0x8000bdc", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov rax qword [rax + 0x20]", "mov qword [local_28h] rax", "cmp qword [local_28h] 0", "jns 0x8000bff", "add qword [local_28h] 7", "mov rdx qword [local_28h]", "sar rdx 3", "mov rax rdx", "shl rax 4", "sub rax rdx", "shl rax 2", "mov rdi qword [local_d0h]", "mov esi eax", "call 0x8000c25", "mov rdi qword [local_d0h]", "mov esi 1", "call 0x8000c37", "mov esi dword [local_58h]", "mov rdi qword [local_d0h]", "call 0x8000c48", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000c5a", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov esi dword [rax + 0x74]", "mov rdi qword [local_d0h]", "call 0x8000c76", "mov rdi qword [local_d0h]", "mov esi 0x10", "call 0x8000c88", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov esi dword [rax + 0x70]", "mov rdi qword [local_d0h]", "call 0x8000ca4", "mov rdi qword [local_d0h]", "mov esi 0", "call sym.put_str8", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "cmp dword [rax + 8] 0", "je 0x8000cf8", "mov rdi qword [local_d0h]", "mov esi 4", "call 0x8000cda", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov esi dword [rax + 8]", "mov rdi qword [local_d0h]", "call 0x8000cf6", "jmp 0x8000d21", "mov rdi qword [local_e8h]", "mov edx 0", "mov esi 0x10", "mov eax 0", "call 0x8000d14", "mov dword [local_48h] 0xffffffff", "jmp 0x8001173", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000d33", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000d45", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000d57", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000d69", "jmp 0x8001022", "mov rdi qword [local_d0h]", "mov esi 0x22", "call 0x8000d80", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x8000ddc", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "cmp dword [rax + 4] 5", "jne 0x8000e4c", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x8000e4a", "jmp 0x8000ea8", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x8000ea8", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov esi dword [rax + 0x38]", "mov rdi qword [local_d0h]", "call 0x8000ec4", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov esi dword [rax + 0x3c]", "mov rdi qword [local_d0h]", "call 0x8000ee0", "mov rax qword [local_c8h]", "mov rdx qword [local_c8h]", "mov qword [local_10h] rdx", "mov eax dword [rax + 0x10]", "mov rcx qword [local_10h]", "cdq", "idiv dword [rcx + 0x14]", "cmp eax 0xffff", "jle 0x8000f54", "mov rax qword [local_c8h]", "mov rdx qword [local_c8h]", "mov qword [local_10h] rdx", "mov eax dword [rax + 0x10]", "mov rcx qword [local_10h]", "cdq", "idiv dword [rcx + 0x14]", "mov rdi qword [local_d0h]", "mov ecx eax", "mov edx 0", "mov esi 0x10", "mov eax 0", "call 0x8000f47", "mov dword [local_48h] 0xffffffea", "jmp 0x8001173", "mov rax qword [local_c8h]", "mov rdx qword [local_c8h]", "mov qword [local_10h] rdx", "mov eax dword [rax + 0x10]", "mov rcx qword [local_10h]", "cdq", "idiv dword [rcx + 0x14]", "mov rdi qword [local_d0h]", "mov esi eax", "call 0x8000f84", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000f96", "mov rax qword [local_c8h]", "mov rdx qword [local_c8h]", "mov qword [local_10h] rdx", "mov eax dword [rax + 0x10]", "mov rcx qword [local_10h]", "cdq", "idiv dword [rcx + 0x14]", "mov rdi qword [local_d0h]", "mov esi eax", "call 0x8000fc6", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000fd8", "mov rdi qword [local_d0h]", "mov esi 8", "call 0x8000fea", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "cmp dword [rax + 4] 5", "jne 0x8001010", "mov rdi qword [local_d0h]", "mov esi 0x10000000", "call 0x800100e", "jmp 0x8001022", "mov rdi qword [local_d0h]", "mov esi 0x20103001", "call 0x8001022", "lea rax [local_a0h]", "inc dword [rax]", "jmp 0x80006b5", "mov rbx qword [local_d8h]", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov rdi qword [local_70h]", "mov edx 1", "mov esi 0", "call 0x800105a", "mov qword [local_78h] rax", "mov rax qword [local_78h]", "mov dword [rbx + 0x70] eax", "mov eax dword [local_8ch]", "movsxd rsi eax", "mov rdi qword [local_d0h]", "mov edx 0", "call 0x8001083", "test rax rax", "js 0x80010c0", "mov rax qword [local_d8h]", "mov esi dword [rax + 0x70]", "mov rdi qword [local_d0h]", "call 0x80010a0", "mov rax qword [local_d8h]", "mov eax dword [rax + 0x70]", "movsxd rsi eax", "mov rdi qword [local_d0h]", "mov edx 0", "call 0x80010c0", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x800111c", "mov esi dword [local_e4h]", "add esi 0x12", "mov rdi qword [local_d0h]", "call 0x8001133", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8001145", "mov esi dword [local_b4h]", "mov rdi qword [local_d0h]", "call 0x8001159", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x800116b", "mov dword [local_48h] 0", "mov eax dword [local_48h]", "add rsp 0xf0", "pop rbx", "ret"], "opt": "L", "compiler": "gcc"}
{"instructions": ["movapd xmm0 xmm10", "mov edx 0", "mov esi 0x28", "mov rdi rbp", "mov eax 6", "call 0x8000cfc", "movsd xmm0 qword [rbx + 0x38]", "movsxd rdx dword [r12 + 0xc4]", "movsd xmm1 qword [rbx + 0x40]", "mov rdi qword [rbx + 0x68]", "mov esi 0x20", "divsd xmm1 xmm0", "movsd qword [rbx + 0x40] xmm1", "movsd xmm1 qword [rbx + 0x48]", "divsd xmm1 xmm0", "movsd qword [rbx + 0x48] xmm1", "movsd xmm1 qword [rbx + 0x50]", "divsd xmm1 xmm0", "movsd qword [rbx + 0x50] xmm1", "movsd xmm1 qword [rbx + 0x58]", "divsd xmm1 xmm0", "movsd qword [rbx + 0x58] xmm1", "movsd xmm1 qword [rbx + 0x60]", "divsd xmm1 xmm0", "divsd xmm0 xmm0", "movsd qword [rbx + 0x60] xmm1", "movsd qword [rbx + 0x38] xmm0", "call 0x8000d66", "test rax rax", "mov qword [rbx + 0x68] rax", "je 0x800155d", "test r13d r13d", "jne 0x8001328", "mov edi dword [r12 + 0x44]", "cmp edi 7", "je 0x800134c", "jle 0x8001310", "cmp edi 8", "je 0x8001360", "cmp edi 9", "jne 0x8001370", "mov qword [rbx + 0x78] 0", "call 0x8000daf", "mov dword [rbx + 0x74] eax", "xor eax eax", "add rsp 0x38", "pop rbx", "pop rbp", "pop r12", "pop r13", "ret", "movsd xmm3 qword [arg_10h]", "movsd xmm1 qword [0x08000ecb]", "movapd xmm2 xmm3", "movsd xmm7 qword [arg_18h]", "mulsd xmm1 xmm0", "addsd xmm0 xmm3", "movsd xmm3 qword [0x08000ee5]", "subsd xmm2 xmm7", "movsd xmm4 qword [0x08000ef1]", "movsd xmm10 qword [rsp]", "mulsd xmm3 xmm0", "movsd qword [rbx + 0x40] xmm1", "xorpd xmm4 xmm0", "movsd qword [rbx + 0x48] xmm2", "movsd qword [rbx + 0x50] xmm3", "movapd xmm5 xmm3", "movsd qword [rbx + 0x58] xmm4", "movsd qword [rbx + 0x60] xmm3", "jmp 0x8000ce0", "cmp edi 6", "jne 0x8001370", "mov qword [rbx + 0x78] 0", "jmp 0x8000daa", "movsxd rdx dword [r12 + 0xc4]", "xor esi esi", "mov rdi rax", "shl rdx 5", "call 0x800133e", "mov edi dword [r12 + 0x44]", "cmp edi 7", "jne 0x8000d8a", "mov qword [rbx + 0x78] 0", "jmp 0x8000daa", "mov qword [rbx + 0x78] 0", "jmp 0x8000daa", "mov r9d 0x18e", "mov r8d 0", "mov ecx 0", "mov edx 0", "xor esi esi", "xor edi edi", "xor eax eax", "call 0x8001391", "call 0x8001396", "nop word cs:[rax + rax]", "mov r9d 0x115", "jmp 0x8001376", "mov eax 0xfffffff4", "jmp 0x8000db4"], "opt": "H", "compiler": "gcc"}
{"instructions": ["sub rsp 8", "or dword [0x080009eb] 0x40", "nop dword [rax + rax]", "call 0x80009f5", "sub eax 0x20", "cmp eax 0x1f", "jbe 0x80009f0", "and dword [0x08000a04] 0xffffffbf", "xor eax eax", "add rsp 8", "ret"], "opt": "H", "compiler": "gcc"}
{"instructions": ["push r13", "mov r13 r9", "push r12", "mov r12 rcx", "push rbp", "mov rbp r8", "push rbx", "sub rsp 0x148", "cmp qword [rdi] 1", "je 0x8001f58", "mov rax qword [rdi + 0x18]", "movsd xmm5 qword [rsi]", "mov rcx qword [rdi + 0x10]", "movsd xmm11 qword [0x080018c5]", "movapd xmm4 xmm5", "mulsd xmm5 xmm2", "movsd xmm6 qword [rax]", "mov qword [local_e0h] 1", "mulsd xmm4 xmm1", "add rcx 1", "mov qword [local_e8h] 0", "mulsd xmm6 xmm0", "mov qword [local_f0h] 3", "mov qword [local_f8h] 2", "xorpd xmm8 xmm8", "mov qword [local_100h] 2", "mov qword [local_108h] 3", "mov qword [local_110h] 0", "xor ebx ebx", "mov qword [local_118h] 1", "mov qword [local_120h] 3", "subsd xmm6 xmm4", "movsd xmm4 qword [rax + rcx*8]", "mov qword [local_128h] 2", "mov qword [local_130h] 1", "mulsd xmm4 xmm0", "mov qword [local_138h] 0", "mov dword [local_60h] 0", "mov dword [local_64h] 1", "mov dword [local_68h] 0", "mov dword [local_6ch] 1", "mov dword [local_70h] 0", "movsd qword [local_80h] xmm6", "mov dword [local_74h] 0", "mov dword [local_78h] 1", "subsd xmm4 xmm5", "mov dword [local_7ch] 1", "movapd xmm5 xmm8", "movsd qword [local_98h] xmm4", "movsd xmm4 qword [rax + rcx*8 - 8]", "mulsd xmm4 xmm0", "mulsd xmm0 qword [rax + 8]", "xor eax eax", "movsd qword [local_88h] xmm4", "movsd qword [local_90h] xmm0", "movsd xmm0 qword [rsi + 8]", "xorpd xmm0 xmm11", "mulsd xmm1 xmm0", "mulsd xmm0 xmm2", "movsd qword [local_a0h] xmm1", "movsd qword [local_a8h] xmm8", "movsd qword [local_b0h] xmm8", "movsd qword [local_b8h] xmm0", "movsd xmm4 qword [0x08001a3f]", "andpd xmm6 xmm4", "andpd xmm1 xmm4", "addsd xmm6 xmm1", "ucomisd xmm6 xmm5", "jbe 0x8001a58", "movapd xmm5 xmm6", "mov rbx rax", "add rax 1", "cmp rax 4", "je 0x8001a80", "movsd xmm6 qword [rsp + rax*8 + 0x80]", "movsd xmm1 qword [rsp + rax*8 + 0xa0]", "jmp 0x8001a3f", "mov rax qword [rdx + 8]", "mov rsi qword [rdx + 0x10]", "shl rax 4", "movsd xmm7 qword [rsi]", "add rax rsi", "movsd xmm6 qword [rsi + 8]", "ucomisd xmm3 xmm5", "movsd xmm10 qword [rax]", "movsd xmm2 qword [rax + 8]", "movapd xmm0 xmm7", "movapd xmm1 xmm6", "movapd xmm12 xmm10", "movapd xmm9 xmm2", "jbe 0x8001bb8", "andpd xmm7 xmm4", "andpd xmm6 xmm4", "andpd xmm10 xmm4", "andpd xmm4 xmm2", "addsd xmm7 xmm6", "addsd xmm10 xmm4", "movsd xmm4 qword [0x08001ae0]", "ucomisd xmm4 xmm3", "maxsd xmm7 xmm10", "movapd xmm10 xmm7", "ja 0x8002100", "movapd xmm7 xmm4", "movsd qword [local_28h] xmm10", "movsd qword [local_20h] xmm4", "divsd xmm7 xmm3", "movq qword [local_38h] xmm9", "movq qword [local_30h] xmm12", "movapd xmm2 xmm7", "movsd qword [local_10h] xmm7", "call 0x8001b26", "movq xmm12 qword [local_30h]", "movq xmm9 qword [local_38h]", "movsd qword [local_18h] xmm0", "movapd xmm0 xmm12", "movsd qword [rsp] xmm1", "movapd xmm1 xmm9", "movsd xmm2 qword [local_10h]", "call 0x8001b54", "movsd xmm10 qword [local_28h]", "mov rax qword [r12 + 8]", "mov rdx qword [r12 + 0x10]", "movsd xmm5 qword [local_18h]", "mulsd xmm10 qword [local_10h]", "movsd xmm3 qword [rsp]", "shl rax 4", "movsd xmm4 qword [local_20h]", "add rax rdx", "movsd qword [rdx] xmm5", "movsd qword [rdx + 8] xmm3", "movsd qword [rax] xmm0", "movsd qword [rax + 8] xmm1", "xor eax eax", "movsd qword [r13] xmm10", "movsd qword [rbp] xmm4", "add rsp 0x148", "pop rbx", "pop rbp", "pop r12", "pop r13", "ret", "lea rax [rbx*8]", "movsd xmm9 qword [rsp + rax + 0x80]", "movsd xmm1 qword [rsp + rax + 0xa0]", "mov rax qword [rsp + rbx*8 + 0xe0]", "shl rax 3", "movsd xmm0 qword [rsp + rax + 0xa0]", "movsd xmm13 qword [rsp + rax + 0x80]", "mov rax qword [rsp + rbx*8 + 0x100]", "movsd qword [rsp] xmm0", "shl rax 3", "movsd xmm0 qword [rsp + rax + 0x80]", "movsd xmm12 qword [rsp + rax + 0xa0]", "mov rax qword [rsp + rbx*8 + 0x120]", "shl rax 3", "cmp rbx 3", "movsd xmm15 qword [rsp + rax + 0xa0]", "movsd xmm14 qword [rsp + rax + 0x80]", "movsd qword [local_20h] xmm15", "je 0x8001c4c", "test rbx rbx", "jne 0x8002068", "movapd xmm15 xmm9", "movapd xmm12 xmm1", "andpd xmm15 xmm4", "andpd xmm12 xmm4", "ucomisd xmm15 xmm12", "jbe 0x8002130", "divsd xmm1 xmm9", "movsd xmm15 qword [0x08001c79]", "movsd qword [local_10h] xmm15", "movapd xmm12 xmm1", "mulsd xmm12 xmm1", "xorpd xmm1 xmm11", "addsd xmm12 xmm15", "mulsd xmm12 xmm9", "movapd xmm9 xmm15", "movapd xmm15 xmm1", "divsd xmm9 xmm12", "mulsd xmm15 xmm9", "movapd xmm11 xmm0", "movapd xmm1 xmm13", "mulsd xmm13 xmm15", "mulsd xmm11 xmm9", "mulsd xmm1 xmm9", "movsd qword [rsp] xmm11", "movapd xmm11 xmm0", "mulsd xmm11 xmm15", "movsd qword [local_18h] xmm11", "movapd xmm11 xmm0", "mulsd xmm0 xmm13", "mulsd xmm11 xmm1", "subsd xmm14 xmm11", "movsd xmm11 qword [local_20h]", "subsd xmm11 xmm0", "movapd xmm0 xmm15", "andpd xmm0 xmm4", "movsd qword [local_20h] xmm0", "movapd xmm12 xmm14", "movapd xmm0 xmm11", "andpd xmm12 xmm4", "andpd xmm0 xmm4", "addsd xmm12 xmm0", "ucomisd xmm3 xmm12", "ja 0x8002030", "movapd xmm3 xmm14", "mov edx dword [rsp + rbx*4 + 0x60]", "test edx edx", "je 0x8001d56", "movapd xmm0 xmm6", "movapd xmm6 xmm2", "movapd xmm2 xmm0", "movapd xmm0 xmm7", "movapd xmm7 xmm10", "movapd xmm10 xmm0", "movapd xmm0 xmm13", "movapd xmm8 xmm1", "mulsd xmm13 xmm7", "mulsd xmm1 xmm6", "mulsd xmm8 xmm7", "mulsd xmm0 xmm6", "movsd xmm14 qword [local_10h]", "addsd xmm13 xmm1", "subsd xmm0 xmm8", "movapd xmm8 xmm7", "subsd xmm2 xmm13", "andpd xmm8 xmm4", "addsd xmm0 xmm10", "movapd xmm1 xmm2", "movapd xmm2 xmm6", "movapd xmm10 xmm1", "andpd xmm2 xmm4", "andpd xmm10 xmm4", "addsd xmm8 xmm2", "movapd xmm2 xmm9", "andpd xmm2 xmm4", "addsd xmm2 qword [local_20h]", "mulsd xmm2 xmm12", "mulsd xmm8 xmm2", "movapd xmm2 xmm0", "andpd xmm2 xmm4", "addsd xmm2 xmm10", "maxsd xmm8 xmm2", "ucomisd xmm8 xmm14", "movapd xmm2 xmm8", "jbe 0x8001df4", "ucomisd xmm14 xmm12", "ja 0x80021c0", "movsd xmm8 qword [local_10h]", "movapd xmm2 xmm3", "movapd xmm3 xmm11", "movapd xmmword [local_50h] xmm4", "movsd qword [local_48h] xmm6", "movsd qword [local_40h] xmm7", "movsd qword [local_38h] xmm15", "movsd qword [local_30h] xmm9", "movsd qword [local_28h] xmm5", "movsd qword [local_20h] xmm8", "call 0x8001e36", "movsd xmm9 qword [local_30h]", "movsd xmm15 qword [local_38h]", "mov eax dword [rsp + rbx*4 + 0x70]", "movsd xmm7 qword [local_40h]", "movapd xmm2 xmm9", "movsd xmm6 qword [local_48h]", "mov rdx qword [r12 + 0x10]", "movapd xmm3 xmm15", "mulsd xmm2 xmm7", "movsd xmm5 qword [rsp]", "test eax eax", "mulsd xmm3 xmm6", "movsd xmm4 qword [local_18h]", "mulsd xmm7 xmm15", "mulsd xmm6 xmm9", "subsd xmm2 xmm3", "movapd xmm3 xmm5", "movsd xmm8 qword [local_20h]", "mulsd xmm3 xmm0", "addsd xmm7 xmm6", "subsd xmm2 xmm3", "movapd xmm3 xmm4", "mulsd xmm3 xmm1", "addsd xmm2 xmm3", "movapd xmm3 xmm4", "movapd xmm4 xmmword [local_50h]", "mulsd xmm3 xmm0", "subsd xmm7 xmm3", "movapd xmm3 xmm5", "movsd xmm5 qword [local_28h]", "mulsd xmm3 xmm1", "subsd xmm7 xmm3", "je 0x8002040", "mov rax qword [r12 + 8]", "movsd qword [rdx] xmm0", "movsd qword [rdx + 8] xmm1", "shl rax 4", "add rax rdx", "movsd qword [rax] xmm2", "movsd qword [rax + 8] xmm7", "andpd xmm7 xmm4", "andpd xmm2 xmm4", "andpd xmm0 xmm4", "andpd xmm4 xmm1", "addsd xmm2 xmm7", "movsd xmm7 qword [local_10h]", "addsd xmm0 xmm4", "maxsd xmm2 xmm0", "ucomisd xmm2 xmm7", "movsd qword [r13] xmm2", "jbe 0x8001f3f", "ucomisd xmm5 xmm7", "jbe 0x8001f3f", "movsd xmm0 qword [0x08001f2d]", "movapd xmm1 xmm0", "divsd xmm1 xmm5", "ucomisd xmm2 xmm1", "ja 0x8002200", "movsd qword [rbp] xmm8", "add rsp 0x148", "xor eax eax", "pop rbx", "pop rbp", "pop r12", "pop r13", "ret", "mov rax qword [rdi + 0x18]", "movsd xmm2 qword [rsi]", "movsd xmm5 qword [rsi + 8]", "mulsd xmm2 xmm1", "mulsd xmm0 qword [rax]", "movsd xmm4 qword [0x08001f75]", "subsd xmm0 xmm2", "movsd xmm2 qword [0x08001f81]", "xorpd xmm5 xmm2", "movapd xmm2 xmm0", "mulsd xmm5 xmm1", "andpd xmm2 xmm4", "movapd xmm1 xmm5", "andpd xmm1 xmm4", "addsd xmm2 xmm1", "ucomisd xmm3 xmm2", "jbe 0x8002020", "xorpd xmm5 xmm5", "movapd xmm2 xmm3", "movsd xmm8 qword [0x08001fb4]", "mov rax qword [rdx + 0x10]", "ucomisd xmm8 xmm2", "movsd xmm0 qword [rax]", "movsd xmm1 qword [rax + 8]", "ja 0x8002180", "mulsd xmm0 xmm8", "movapd xmm2 xmm3", "mulsd xmm1 xmm8", "movapd xmm3 xmm5", "movapd xmmword [rsp] xmm4", "movsd qword [local_10h] xmm8", "call 0x8001fef", "mov rax qword [r12 + 0x10]", "movapd xmm4 xmmword [rsp]", "movsd qword [rax] xmm0", "andpd xmm0 xmm4", "andpd xmm4 xmm1", "movsd qword [rax + 8] xmm1", "movsd xmm8 qword [local_10h]", "addsd xmm0 xmm4", "movsd qword [r13] xmm0", "jmp 0x8001f3f", "movapd xmm3 xmm0", "jmp 0x8001fab", "movapd xmm11 xmm8", "jmp 0x8001d34", "mov rax qword [r12 + 8]", "movsd qword [rdx] xmm2", "movsd qword [rdx + 8] xmm7", "shl rax 4", "add rax rdx", "movsd qword [rax] xmm0", "movsd qword [rax + 8] xmm1", "jmp 0x8001ef1", "movsd xmm1 qword [0x08002070]", "movapd xmm15 xmm0", "xorpd xmm11 xmm0", "movsd qword [local_10h] xmm1", "divsd xmm1 xmm9", "movsd qword [local_20h] xmm8", "movapd xmm9 xmm1", "movapd xmm1 xmm13", "movsd xmm13 qword [rsp]", "mulsd xmm15 xmm9", "mulsd xmm1 xmm9", "mulsd xmm13 xmm9", "movsd qword [rsp] xmm15", "movapd xmm15 xmm12", "mulsd xmm15 xmm9", "mulsd xmm11 xmm13", "movsd qword [local_18h] xmm15", "movapd xmm15 xmm0", "mulsd xmm15 xmm1", "subsd xmm14 xmm15", "movapd xmm15 xmm12", "mulsd xmm12 xmm1", "mulsd xmm15 xmm13", "subsd xmm11 xmm12", "addsd xmm14 xmm15", "movapd xmm15 xmm8", "jmp 0x8001d0c", "ucomisd xmm7 xmm4", "jbe 0x8001af4", "movsd xmm2 qword [0x08002112]", "mulsd xmm2 xmm3", "ucomisd xmm7 xmm2", "jbe 0x8001af4", "divsd xmm4 xmm7", "jmp 0x8001af4", "divsd xmm9 xmm1", "movsd xmm15 qword [0x0800213e]", "movsd qword [local_10h] xmm15", "movapd xmm12 xmm9", "mulsd xmm12 xmm9", "xorpd xmm9 xmm11", "addsd xmm12 xmm15", "movsd xmm15 qword [0x08002162]", "mulsd xmm12 xmm1", "divsd xmm15 xmm12", "mulsd xmm9 xmm15", "jmp 0x8001cad", "movapd xmm6 xmm0", "movapd xmm7 xmm1", "andpd xmm6 xmm4", "andpd xmm7 xmm4", "addsd xmm6 xmm7", "ucomisd xmm6 xmm8", "jbe 0x8001fcc", "mulsd xmm2 qword [0x080021a7]", "ucomisd xmm6 xmm2", "jbe 0x8001fcc", "divsd xmm8 xmm6", "jmp 0x8001fcc", "mulsd xmm12 qword [0x080021c9]", "ucomisd xmm8 xmm12", "jb 0x8001df4", "movapd xmm8 xmm14", "divsd xmm8 xmm2", "mulsd xmm7 xmm8", "mulsd xmm6 xmm8", "mulsd xmm0 xmm8", "mulsd xmm1 xmm8", "jmp 0x8001dfb", "divsd xmm5 xmm0", "mov rdi r12", "movsd qword [rsp] xmm8", "movapd xmm0 xmm5", "movsd qword [local_10h] xmm5", "call 0x800221c", "movsd xmm5 qword [local_10h]", "movsd xmm0 qword [r13]", "movsd xmm8 qword [rsp]", "mulsd xmm0 xmm5", "mulsd xmm8 xmm5", "movsd qword [r13] xmm0", "jmp 0x8001f3f"], "opt": "H", "compiler": "gcc"}
{"instructions": ["push r15", "xor r10d r10d", "test edx edx", "push r14", "push r13", "lea r13 [rdi + 0xa]", "push r12", "mov r8 r13", "push rbp", "mov ebp edx", "push rbx", "mov rbx rsi", "mov r9d dword [rdi]", "mov qword [rsp - 0x30] rsi", "je 0x8000124", "xor r12d r12d", "cmp r9d 0x31", "jle 0x8000189", "lea edx [r9 + 2]", "movsxd rax edx", "sar edx 0x1f", "imul rax rax 0x55555556", "shr rax 0x20", "sub eax edx", "cmp r9d 0x31", "cdqe", "lea r11 [r8 + rax*2 - 2]", "jg 0x80001a3", "movsxd rax r9d", "cmp ebp 0x31", "movzx rax byte [rax]", "lea rcx [rsp + rax*2 - 0x2a]", "jg 0x80001ca", "movsxd rax ebp", "cmp ebp 0x31", "movzx rax byte [rax]", "lea r8 [rcx + rax*2]", "jg 0x80001ef", "movsxd rax ebp", "movzx eax byte [rax]", "lea esi [rax + rax*2]", "sub esi ebp", "test esi esi", "jne 0x8000212", "jmp 0x80000f8", "movzx eax word [r11]", "sub r11 2", "mov word [r8] ax", "sub r8 2", "cmp r13 r11", "jbe 0x80000e8", "lea rax [rsp - 0x28]", "cmp rax r8", "jmp 0x800011a", "lea rcx [rsp - 0x28]", "mov word [r8] r12w", "sub r8 2", "xor r12d r12d", "cmp rcx r8", "jbe 0x8000107", "lea r8 [rsp - 0x28]", "add r9d ebp", "test r9d r9d", "jle 0x800017e", "mov rax qword [rsp - 0x30]", "mov esi 0xa", "mov edi dword [rax]", "movzx eax word [r8]", "mov ecx r10d", "add r10d 0xa", "sub r9d 3", "add r8 2", "mov eax eax", "movzx edx word [rax + rax]", "mov eax edx", "shl eax cl", "or eax edi", "cmp r10d 0x1f", "mov edi eax", "jbe 0x8000177", "sub r10d 0x20", "mov ecx esi", "mov dword [rbx] eax", "sub ecx r10d", "add rbx 4", "shr edx cl", "or edx dword [rbx]", "mov edi edx", "mov eax edx", "test r9d r9d", "jg 0x8000135", "mov dword [rbx] eax", "pop rbx", "pop rbp", "pop r12", "pop r13", "pop r14", "pop r15", "ret", "movsxd rax r9d", "cmp r9d 0x31", "movzx rax byte [rax]", "lea r11 [r8 + rax*2 - 2]", "jle 0x800009e", "lea edx [r9 + 2]", "movsxd rax edx", "sar edx 0x1f", "imul rax rax 0x55555556", "shr rax 0x20", "sub eax edx", "cmp ebp 0x31", "cdqe", "lea rcx [rsp + rax*2 - 0x2a]", "jle 0x80000b7", "lea edx [arg_2h]", "movsxd rax edx", "sar edx 0x1f", "imul rax rax 0x55555556", "shr rax 0x20", "sub eax edx", "cmp ebp 0x31", "cdqe", "lea r8 [rcx + rax*2]", "jle 0x80000cf", "lea edx [arg_2h]", "movsxd rax edx", "sar edx 0x1f", "imul rax rax 0x55555556", "shr rax 0x20", "sub eax edx", "lea esi [rax + rax*2]", "sub esi ebp", "test esi esi", "je 0x80000f8", "lea eax [r9 + rbp]", "cmp eax 0x31", "jle 0x80002ac", "lea edx [rax + 2]", "movsxd rax edx", "sar edx 0x1f", "imul rax rax 0x55555556", "shr rax 0x20", "sub eax edx", "cdqe", "lea rax [rsp + rax*2 - 0x2a]", "cmp r13 r11", "mov qword [rsp - 0x38] rax", "ja 0x80000fd", "movsxd rax esi", "mov r15d dword [rax*4]", "mov r14d dword [rax*4]", "mov eax 3", "sub eax esi", "movsxd rdi eax", "movzx eax word [r11]", "mov ecx esi", "mov edx eax", "shr edx cl", "mov ecx r14d", "imul edx r15d", "shr edx 0x11", "imul ecx edx", "add r12d edx", "sub eax ecx", "cmp r8 qword [rsp - 0x38]", "ja 0x800028e", "mov word [r8] r12w", "mov r12d dword [rdi*4]", "sub r11 2", "sub r8 2", "imul r12d eax", "cmp r13 r11", "jbe 0x8000267", "jmp 0x80000fd", "cdqe", "movzx rax byte [rax]", "jmp 0x8000237"], "opt": "H", "compiler": "gcc"}
{"instructions": ["mov rcx qword [local_38h]", "xor rcx qword fs:[0x28]", "mov rax rbx", "jne 0x8003105", "add rsp 0x48", "pop rbx", "pop rbp", "pop r12", "pop r13", "pop r14", "pop r15", "ret", "mov rdi qword [0x08001ef3]", "mov esi 0x30", "call 0x8001efd", "mov dword [rax] 0x6c", "mov edx dword [r12 + 4]", "mov dword [rax + 4] edx", "mov edx dword [r12 + 8]", "mov dword [rax + 8] edx", "mov edx dword [r12 + 0xc]", "mov dword [rax + 0xc] edx", "movzx edx byte [r12 + 0x10]", "mov byte [rax + 0x10] dl", "mov edx dword [r12 + 0x14]", "mov rbx rax", "mov dword [rax + 0x14] edx", "mov edx dword [r12 + 0x18]", "mov dword [rax + 0x18] edx", "mov rdx qword [arg_30h]", "mov qword [rax + 0x20] rdx", "mov edx dword [r12 + 0x28]", "mov dword [rax + 0x28] edx", "jmp 0x8001da8", "mov dword [rax] 0x76", "mov qword [rax + 8] rbp", "mov rbx rax", "mov edx dword [r12 + 0x10]", "mov dword [rax + 0x10] edx", "mov edx dword [r12 + 0x14]", "mov dword [rax + 0x14] edx", "mov edx dword [r12 + 0x18]", "mov dword [rax + 0x18] edx", "mov edx dword [r12 + 0x1c]", "mov dword [rax + 0x1c] edx", "mov edx dword [r12 + 0x20]", "mov dword [rax + 0x20] edx", "jmp 0x8001da8", "test rbx rbx", "jne 0x8001da8", "jmp 0x8001eec", "mov rdi rbx", "call 0x80030ce", "mov rbx rax", "jmp 0x8002fc1", "call 0x800310a", "cmp byte [rax + 0x18] 0", "jne 0x8002fc1", "jmp 0x80030c6"], "opt": "H", "compiler": "gcc"}