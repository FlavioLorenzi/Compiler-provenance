{"instructions": ["mov eax dword [arg_784h]", "add eax 3", "mov edi eax", "call sym.getIByte", "mov byte [arg_65fh] al", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.epartIsReg", "test al al", "je 0x8021c22", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.eregOfRM", "mov edi eax", "call sym.getXMMReg", "mov rbx rax", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.gregOfRM", "mov rsi rbx", "mov edi eax", "call sym.putXMMReg", "mov eax dword [0x08021bc8]", "and eax 0x80", "test eax eax", "je 0x8021c15", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.gregOfRM", "mov edi eax", "call sym.nameXMMReg", "mov rbx rax", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.eregOfRM", "mov edi eax", "call sym.nameXMMReg", "mov rdx rbx", "mov rsi rax", "mov edi 0", "mov eax 0", "call 0x8021c15", "add dword [arg_784h] 4", "jmp 0x803699b", "mov eax dword [arg_784h]", "lea edi [rax + 3]", "movzx esi byte [arg_77fh]", "lea rdx [arg_180h]", "lea rax [arg_1bch]", "mov rcx rdx", "mov edx edi", "mov rdi rax", "call sym.disAMode", "mov dword [arg_674h] eax", "mov eax dword [arg_674h]", "mov edi eax", "call sym.mkexpr", "mov rsi rax", "mov edi 0x110e", "call sym.loadLE", "mov rbx rax", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.gregOfRM", "mov rsi rbx", "mov edi eax", "call sym.putXMMReg", "mov eax dword [0x08021c95]", "and eax 0x80", "test eax eax", "je 0x8021cd1", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.gregOfRM", "mov edi eax", "call sym.nameXMMReg", "mov rdx rax", "lea rax [arg_180h]", "mov rsi rax", "mov edi 0", "mov eax 0", "call 0x8021cd1", "mov eax dword [arg_1bch]", "add eax 3", "add dword [arg_784h] eax", "jmp 0x803699b", "mov eax dword [local_164h]", "cmp eax 0x11", "je 0x80369ba", "cmp eax 0x11", "ja 0x80369b3", "cmp eax 0x10", "je 0x8036a26", "jmp 0x8036a0d", "cmp eax 0x13", "ja 0x8036a0d", "jmp 0x80369e7", "mov edx dword [0x080369c0]", "mov eax dword [local_784h]", "add eax edx", "mov edi eax", "call sym.mkU32", "mov rsi rax", "mov edi 0x44", "call 0x80369dd", "mov rdi rax", "call sym.stmt", "jmp 0x8036a27", "mov rax qword [local_170h]", "mov edi eax", "call sym.mkU32", "mov rsi rax", "mov edi 0x44", "call 0x8036a03", "mov rdi rax", "call sym.stmt", "jmp 0x8036a27", "mov ecx 0", "mov edx 0x3c64", "mov esi 0", "mov edi 0", "call 0x8036a26", "nop", "mov eax dword [0x08036a2d]", "and eax 0x80", "test eax eax", "je 0x8036a45", "mov edi 0", "mov eax 0", "call 0x8036a45", "mov eax dword [local_684h]", "mov edx dword [local_784h]", "mov ecx edx", "sub ecx eax", "mov eax ecx", "mov dword [local_160h] eax", "mov rax qword [local_48h]", "mov rdx qword [local_160h]", "mov qword [rax] rdx", "mov rdx qword [local_168h]", "mov qword [rax + 8] rdx", "mov rdx qword [local_170h]", "mov qword [rax + 0x10] rdx", "mov rax qword [local_48h]", "add rsp 0x7a8", "pop rbx", "pop rbp", "pop r12", "pop r13", "ret"], "opt": "L", "compiler": "gcc"}